@name Lift and drag
@inputs P:wirelink
@persist V:vector Vx Vy Vz Vm Ox:angle Oy:angle Oz:angle A X B Y C Z Bs:vector Bx By Bz Ax Ay Az Lf Lr Lu Dx Dy Dz Df Dr Du

interval(10)

E = P:entity()

#Local velocites
V = E:velL()/3500
Vx = V:x()
Vy = V:y()
Vz = V:z()
#Squared velocity magnitude
Vm = V:length2()

#Ax plane angles
Ox = vec(Vx,Vz,Vy):toAngle()

#Ay plane angles
Oy = vec(Vy,Vz,Vx):toAngle()

#Az plane angles
Oz = vec(Vx,Vy,Vz):toAngle()

#Ax plane pitch
A = Ox:pitch()
#Ax plane yaw
X = Ox:yaw()

#Ay plane pitch 
B = Oy:pitch()
#Ay plane yaw
Y = Oy:yaw()

#Az plane pitch
C = Oz:pitch()
#Az plane yaw
Z = Oz:yaw()

#Bounding box dimensions
Bs = E:boxSize()
Bx = Bs:x()
By = Bs:y()
Bz = Bs:z()

#Areas of each plane
Ax = Bx*Bz
Ay = By*Bz
Az = Bx*By

#Lift on the X plane
Lx = Ax*Vm*sin(A*2)
# For Lx, the force on Y does not change with X as it acts perpendicular to the plane. As such can always apply force indifferent of X's value. 

#Lift on the Y plane
Ly = Ay*Vm*sin(B*2)

#Lift on the Z plane
Lz = Az*Vm*sin(C*2)

#Lift on X axis
Lf = Lx*sin(A)*cos(X) + Ly*cos(B) + Lz*sin(C)*cos(Z)
#Lift on Y axis (acts opposite to the velocity)
Lr = Lx*cos(A) + Ly*sin(B)*cos(Y) + Lz*sin(C)*sin(Z)
#Lift on Z axis
Lu = Lx*sin(A)*sin(X) + Ly*sin(B)*sin(Y) + Lz*cos(C)

#---------------------

#Drag of X plane
Dx = 2*Ax*Vm*sin(A)^2

#Drag on Y plane
Dy = 2*Ay*Vm*sin(B)^2

#Drag on Z plane
Dz = 2*Az*Vm*sin(C)^2

#Drag on X axis
Df = -cos(A)*Dx*cos(X) + sin(B)*Dy - cos(C)*Dz*cos(Z)
#Drag on Y axis
Dr = sin(A)*Dx - cos(B)*Dy*cos(Y) - cos(C)*Dz*sin(Z)
#Drag on Z axis
Du = -cos(A)*Dx*sin(X) - cos(B)*Dy*sin(Y) + sin(C)*Dz

# X = forward, Y = right, Z = up 
E:applyForce(E:forward()*(Lf + Df) - E:right()*(Lr + Dr) + E:up()*(Lu + Du))


