@name Bezier Curve
@inputs On 
@outputs P0 P1 P2 P3
@persist Rate Size
@persist P0 P1 P2 P3 T
@persist A B C D TS
@persist E F G H 
@persist [Ent]:entity 
@trigger 

if(first()|dupefinished())
{
    Ent = entity()

    Rate = 1/10
    Size = 32.75
    
    P0 = 0
    P1 = 1
    P2 = 3
    P3 = 5
    
    P4 = 0
    P5 = 7
    P6 = 2
    P7 = 5
    
        
    
    

    A = P3 - (3*P2) + (3*P1) - P0
    B = (3*P2) - (6*P1) + (3*P0)  
    C = (3*P1) - (3*P0)
    D = P0

    E = P7 - (3*P6) + (3*P5) - P4
    F = (3*P6) - (6*P5) + (3*P4)  
    G = (3*P5) - (3*P4)
    H = P4
    
 #   for(N = 0,0)
#{
    N = 0
    Holo = holoCreate(N,
    Ent:toWorld(vec()),
    vec(0.25),
    Ent:toWorld(ang()),
    vec(255,0,0)
    ), holoParent(N,Ent)
#}
  holoEntity(0):setTrails(1,0.1,10,"trails/laser",vec(255,0,0),100)  
}
interval(10)


T++#clamp(T + (((On) * 2) - sign(T))*Rate, 0, 1)

TS = abs(sin(T))
#X = (((A*T) + B)*T + C)*T + D
X = (A*T^3) + (B*T^2) + (C*T) + D

#A = (1-T)*P0+T*P1

#for(N = 0,10){
    holoPos(0,
    Ent:toWorld(vec(
    (A*TS^3) + (B*TS^2) + (C*TS) + D,
    0,
    (E*TS^3) + (F*TS^2) + (G*TS) + H)*Size)
    )
    
 #   }
