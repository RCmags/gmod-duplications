@name Hover ornithopter - Flight Controller - Self upright - Passive

# DESCRIPTION
# -----------
# Flight controller for a hovering ornithopter.
# The aircraft uses variable amplitude and dihedral
# to control pitch and roll. Assymetric wing twist
# is used to control the yaw axis.
#------------

# control inputs
@inputs P_input R_input Y_input Z_input On

#-------

# Flapping  
@outputs Constant Damping 
@outputs H1 H2 H3 H4

# Feathering
@outputs Constant2 Damping2
@outputs H5 H6

#-------

# State
@persist Ent:entity Freq Angle_rate:angle Amp_bias

# Constants
    # hydros
@persist Constant Damping Constant2 Damping2 RADIUS LENGTH
    # motion
@persist AMP_BASE FREQ PITCH_MAX YAW_MAX AMP_MAX  
    # Pid
@persist [K_DERIV K_PROP]:angle K_DAMP:vector 
    # inputs
@persist INPUT_DECAY GAIN_Z GAIN_PYR:angle Angle_yaw

#=======================
# 0. Constants
#=======================
if( first() ) {
    # I. constants
    # Hydraulic parameters
    Constant  = 25000
    Damping   = 700
    Constant2 = 3000
    Damping2  = 120
    
    # Lengths
    RADIUS = 95
    LENGTH = 2000
    
    # Flight parameters
    AMP_BASE = 38       # Amplitude - deg
    FREQ     = 21       # Oscillation in Hz * 1e-1
    
    # Control inputs
    INPUT_DECAY = 0.05   # Alpha rate 
    GAIN_Z      = 15    # Amplitude change | deg
        # Bank angle: 
    GAIN_PYR = ang(40, 50, 40)      # pitch, yaw, roll | deg, deg/s, deg
            
    # PID controller
        # Rotation
    K_DERIV = ang(0.7, 1.2, 0.3)    # pitch, yaw, roll
    K_PROP  = ang(1.8, 4, 0.8)     
        # Lateral
    K_DAMP  = vec( -0.02, 0.05, 0.03 ) # x, y, z
    
    # Motion limits
    PITCH_MAX = 30      # deg
    YAW_MAX   = 36      # length change
    AMP_MAX   = 90      # deg
    
    # II. state variables
    Ent = entity()
    Freq       = 0
    Angle_rate = ang(0,0,0)
    Amp_bias   = 0
    Angle_yaw  = 0
}


#=======================
# 1. State
#=======================
interval(10)

Vel = Ent:velL()
Angvel = Ent:angVel()
Angles = Ent:angles() 

#=======================
# 2. Wave
#=======================
Freq *= On
Freq += FREQ*On   
Freq = Freq > 360 ? Freq - 360 : Freq

Wave = sin(Freq)

#=======================
# 2. Control inputs
#=======================
Rate   = ang(P_input,Y_input,-R_input) * GAIN_PYR
Rate_z = Z_input * GAIN_Z

    # low pass filters
Angle_rate += ( Rate - Angle_rate )*INPUT_DECAY   
Amp_bias   += ( Rate_z - Amp_bias )*INPUT_DECAY 
Angle_yaw  += ( Angvel:yaw() - Rate:yaw() )*10e-3

#=======================
# 3. PID Controllers 
#=======================  
    # lateral damping
Damp = Vel * K_DAMP
Damp = vec( clamp( Damp:x(), -90, 90) , # Limit bank to 90 deg
            clamp( Damp:y(), -90, 90) , 
            Damp:z()                  )

    # Target angle   
Angle_t = ang( Angles:pitch() - Angle_rate:pitch() - Damp:x(), 
               Angle_yaw                                     , 
               Angles:roll() - Angle_rate:roll() - Damp:y()  )

    # controller
PID = Angvel*K_DERIV + Angle_t*K_PROP

Yaw   = PID:yaw() - Rate:yaw()*K_DERIV:yaw() 
Roll  = PID:roll()
Pitch = PID:pitch()
    
    # Limit deflections    
Pitch = clamp(Pitch, -PITCH_MAX, PITCH_MAX)   # deflection degrees
Yaw   = clamp(Yaw  , -YAW_MAX  , YAW_MAX)     # hydralic extension

    # Amplitude per wing
Amp = AMP_BASE + Amp_bias - Damp:z()
Wave_Amp1 = Wave * clamp(Amp + Roll, 0, AMP_MAX) # Restrict to 90 angle
Wave_Amp2 = Wave * clamp(Amp - Roll, 0, AMP_MAX)

#=======================
# 4. Hydraulic lengths
#=======================
    # I. xy - flap axis
        # Target flap angle
Ang1 = Wave_Amp1 + Pitch
Ang2 = Wave_Amp2 + Pitch
        # lengths
H1 = LENGTH + sin(Ang1)*RADIUS
H2 = LENGTH + sin(Ang2)*RADIUS
H3 = LENGTH - cos(Ang1)*RADIUS
H4 = LENGTH - cos(Ang2)*RADIUS

    # II. z - wing feathering axis
H5 = LENGTH - Yaw
H6 = LENGTH + Yaw 
