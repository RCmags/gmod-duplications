@name Aspect ratio lift
@inputs W:wirelink 
@outputs Cl Cd
@persist V:vector A:angle B:vector 

runOnTick(1)

#Initial variables:

E = W:entity()

V = E:velL()

A = V:toAngle()
P = asin(sin(A:pitch()))
Y = A:yaw()

Cp = cos(P)
Cy = cos(Y)
Sy = sin(Y)
Sp = sin(P)

B = E:boxSize()
Bx = B:x()
By = B:y()

Ar = (abs(Cy)*By + abs(Sy)*Bx)/(abs(Cy)*Bx + abs(Sy)*By)

#Aspect ratio depedant variables:

if(Ar < 1) {
   
   N = 1 - Ar^2
   ACl = 8.16*N + 36.84
   Cd1Max = 0.1654*N + 0.4532

} else {
    
   N = Ar^0.9 
   ACl = 15 + 21.84/N
   Cd1Max = 0.05 + 0.4032/N

}

Cl1Max = 0.7735 + 0.3927/exp((4/Ar)^2)

Cl2Max = 0.7735 + 0.4165/exp((9/Ar)^2.3)


#Lift coefficient:

N = 90/ACl
I = (2*Cl2Max - Cl1Max*N)*180/(4*Cl2Max - Cl1Max*N^2)

if(P > 0) {

   S = 1

} else {

   S = -1

}

N = abs(P)

if(N < I) {
   
   Cl = (1 - (N/ACl - 1)^2)*Cl1Max*S

} else {

   Cl = (1 - (N/45 - 1)^2)*Cl2Max*S

}

#Drag coefficient:

if(N < ACl) {

   Cd = (Cd1Max - 0.01)*(N/ACl)^2 + 0.01 

} else {
   
   Cd2Max = 1.196 + 1.104/exp((6.5/Ar)^1.1)
   Cd = Cd1Max + (Cd2Max - Cd1Max)*sin((abs(N) - ACl)*90/(90 - ACl))

}

#Force aplication:

Lx = Cl*Sp
Dx = Cd*Cp

E:applyForce( (E:forward()*Cy*(Lx - Dx) - E:right()*Sy*(Lx - Dx) + E:up()*(Cp*Cl + Sp*Cd))*V:length2()*2*B:x()*B:y()/17200000 )
