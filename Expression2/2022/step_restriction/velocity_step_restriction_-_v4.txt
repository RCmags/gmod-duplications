@name Velocity Step Restriction - decompose force
@inputs E:entity
@outputs [Xms Xn]:vector 
@outputs Ratio
@persist DT_MS DT MASS LMAX
@persist Xn:vector 
@persist Ratio 
@trigger 

# First call
if( first() ) {
    #--- Constants ---
    DT_MS = 10
    DT = DT_MS * 1e-3
        
    # Decay ratio 
    Ratio = 0
    LMAX = 1.0  # Oscillates for L > 1
        
    #--- Functions ----

    # Ode functions - feedback
    function vector ode1(X:vector) {                             
        Vz = X:dot( E:up() ) * E:up()
        return -Vz * 100 / DT          # Linear lift
    }
    
    function vector ode2(X:vector) {                             
        Vz = X:dot( E:up() ) * E:up()
        Vxy = X - Vz
        return -Vxy * 0.1 / DT          # Linear lift
    }
    
    # Set Prop velocity
    function void setVelocity( Vel:vector ) {
        Impulse = E:mass() * ( Vel - E:vel() )
        E:applyForce( Impulse )
    }
    
    # Step Restriction    
    function vector stepLimit( Dv:vector, Vel:vector ) {
        Vdot = Vel:dot(Dv)
        if( Vdot != 0 ) {
            R = -Dv:length2() / Vdot
        } else {
            R = 1
        }
        if( R > LMAX ) {
            Dv = Dv * LMAX/R
        }
        return Dv       
    }

} # end, First call

# Iterate
interval(DT_MS)

# 1. Measure velocity
Xms = E:vel()

# 2. Estimate velocity changes
Dx1 = DT*ode1(Xms)        # Explicit method, X(n) = Xms
Dx2 = DT*ode2(Xms)

# 3. Clamp velocity changes
Dx1 = stepLimit(Dx1, Xms)
Dx2 = stepLimit(Dx2, Xms)

# 4. Update state
    # combine changes
Xn = Xms + Dx1 + Dx2

# 5. Set Prop state   [Must come after velocity measurement, or blocks measurement]
setVelocity( Xn )

# Note: 
#   - Decompose force into parts then ensure each part is stable.
#   - Use a taylor series to break apart force into sum of factors.
#   - Force is assumed to be a linear combination of simple terms.
