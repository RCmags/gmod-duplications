@name Constraints Core
@model models/jaanus/wiretool/wiretool_pixel_sml.mdl
if(first() | dupefinished() | clk("Start_Core") | clk("Start_Library") | clk("SemiPrecision") | clk("CS") | clk("RCF"))
{
    if(first() | dupefinished() | clk("Start_Library")){#include "Constraints/Constraints_Library"}
    
    
    
    #------------------------------------------------------------------------------#
    #                                 Lynx AH.1                                    #
    #------------------------------------------------------------------------------#
    
    
    
    if(clk("Start_Core"))
    {
        ##############################################################################
        ############################# Grip & Rotor Blade #############################
        XOffsetA1 = 8.0       XOffsetB1 = 140.170
        AA1 = ang(0, 0, 0)    AB1 = ang(0, 0, 0)
        
        XOffsetA2 = 3.3       XOffsetB2 = 25.410
        AA2 = ang(0, 0, 0)    AB2 = ang(0, 0, 0)
        
        ZOffset1 = 18.176     ZOffset2 = 10.160
        
        local CD = 0.03125
        #Whether_Sweep_Blade1 = 0    Feathering1_Offset = CD * -8.0    # CD * Integal
        #Whether_Sweep_Blade2 = 1    Feathering2_Offset = CD * 8.0     # CD * Integal
        Whether_Sweep_Blade1 = 0    Feathering1_Offset = CD * -0.0    # CD * Integal
        Whether_Sweep_Blade2 = 0    Feathering2_Offset = CD * 0.0     # CD * Integal
        
        
        ##################################################################
        ######################## Balancing weights #######################
        #BW1_Offset1 = vec(65.983, 8.2, 0.0)      BW1_Offset2 = ang(0, 0, 0)
        #BW2_Offset1 = vec(12.0, -2.3, 0.0)       BW2_Offset2 = ang(0, 0, 0)
        BW1_Offset1 = vec(65.983, 0.0, 0.0)      BW1_Offset2 = ang(0, 0, 0)
        BW2_Offset1 = vec(12.0, -0.0, 0.0)       BW2_Offset2 = ang(0, 0, 0)
        
        
        
        define_additional_Array()
        
        ####################################################################################
        ################################## Weight setting ##################################
        Grp1:multi_W(18.0)   Bla1:multi_W(35.0)  BW1:multi_W(0.1)
        
        Grp2:multi_W(0.0)    Bla2:multi_W(5.0)   BW2:multi_W(0.1)
        
        XMSN1:single_W(20)   XMSN2:single_W(40)
        
        
        
        #####################################################################################
        ################################## Lead-Lag, Hinge ##################################
        Side1 = -2000
        Delta3_Angle1 = 0
        Rigid_Offset1 = 0.0
        
        Side2 = 2000
        Delta3_Angle2 = 0
        Rigid_Offset2 = 0.0
        
        
        
        #####################################################################
        ##################### Rope-Slider (Axis-Slider) #####################
        Length1 = 2000     # SwashPlate
        Length2 = 2000     # Extra Swashplate
        
        
        
        ###########################################################################
        ##################### Rope & Elastic Width, materials #####################
        Width1 = 0    Mat1 = "cable/blue"              # Leag-Lag
        Width2 = 1    Mat2 = "cable/red"               # Pitch link
        Width3 = 0    Mat3 = "cable/green"             # Rope-slider
        Width4 = 0    Mat4 = "cable/rope"              # Suspension elastic
        
        
        
        #################################################################################################
        ################################## Rotor Blade Adv.BallSocket2 ##################################
        # Alignment angle for rotor mast, Min rotation limint, Max rotation limint
        Alignment_World_Angle1 = ang(0, 90, 0)           Min1 = -vec(180, 180, 180)   Max1 = vec(180, 180, 180)
        Alignment_World_Angle2 = ang(-90, -180, 180)     Min2 = -vec(90, 15, 25)      Max2 = vec(90, 15, 25)
        
        
        
        #######################################################
        ############# Physics properties of wheel #############
        W1:propPhysicalMaterial("phx_tire_normal")
        W2:propPhysicalMaterial("phx_tire_normal")
        W3:propPhysicalMaterial("phx_tire_normal")
        W4:propPhysicalMaterial("phx_tire_normal")
        Extra_Wheel1:propPhysicalMaterial("phx_tire_normal")
        Extra_Wheel2:propPhysicalMaterial("phx_tire_normal")
        
        
        
        Auto_UnFreeze = 0     # Automatically unfreeze after successful constrained.
        
        
        
        spanWise()
        
        timer("SemiPrecision", 50)
    }
    elseif(clk("SemiPrecision"))
    {
        Bla1:gce()      print(_HUD_PRINTCONSOLE, "Chord1 Offset: " + Chord_Table1[1, vector])
        Bla2:gce()      print(_HUD_PRINTCONSOLE, "Chord2 Offset: " + Chord_Table2[1, vector])
        
        trigger()
    }
    
    
    
    if(clk("CS")){next_CS()}
    
    
    
    switch(CS)
    {
        case 1,
        
        start_Case()
        
        
        
        blade_NoCollide(1)     # Anti-collision affect on a rotor blade with the other rotor blade (Bla1, Bla2)
        
        
        
        parenting()
        
        
        
        #clk_WeldParent()
        
        
        
        
        #Reverse = 0      TW1:welt_Blade()
        
        #Reverse = 0      TW2:welt_Blade()
        
        
        
        
        Reverse = 0      Hub2:hub_Link()
        
        
        
        
        Reverse = 0      Swash:z_Lock(Hub1)
        
        
        
        
        
        Reverse = 0      Mode = 0      Stage = 1      Extra:pitchLink(0, vec(0, 3000.0, 0), Bla2, vec(XOffsetA2, 0, 0) - (ChordLine2 * 5.0):rotate(ang(0, 45, 0)), 0)
        
        
        
        
        
        
        Reverse = 0      Stage = 1      Bla1:lead_lag_Rope()
        
        Reverse = 0      Stage = 1      Bla2:lead_lag_Rope()
        
        
        
        
        Reverse = 0      Bla1:blade_Hinge()
        #Reverse = 0      Bla1:blade_Hinge()
        
        Reverse = 0      Bla2:blade_Hinge()
        #Reverse = 0      Bla2:blade_Hinge()
        
        
        link_TailSlider_GearBox()
        
        
        if(!INC)
        {
            for(N = 1, Bla1:count())
            {
                Bla1:allocate()
                
                local Blade = Bla1[N, entity]
                
                Reverse = 0
                
                local Offset = vec(0, 0, 0)
                
                #elastic2(Blade, Blade:massCenterL() + Offset, Hub1, Hub1:toLocal(RotorMast:toWorld(RotorMast:massCenterL() - (AXIS * 2000))), 20000, 1000, 0, Mat4, Width4, 0)
                
                elastic2(Blade, Blade:massCenterL() + Offset, Base, Base:toLocal(RotorMast:toWorld(RotorMast:massCenterL() - (AXIS * 2000))), 20000, 1000, 0, Mat4, Width4, 0)
            }
        }
        
        
        
        
        Reverse = 0      Mode = 0      Hub1:axis_Multi(Hub1_Local_Axis, 0)
        
        Reverse = 0      Mode = 0      Hub2:axis_Multi(Hub2_Local_Axis, 0)
        
        
        
        
        
        Reverse = 0      Grp1:ball_Array(Hub1)
        
        
        Reverse = 0      Mode = 0      Stage = 1      Swash:pitchLink(45, vec(15.0, 0, 0), Grp1, vec(0, 0, 0), -10)
        
        
        Reverse = 0      Mode = 0      Stage = 1      A = xyz_lock_Link(A, Bla1, Grp1)
        #Reverse = 1      Mode = 0      Stage = 1      A = xyz_lock_Link(A, Bla1, Grp1)
        #Reverse = 0      Mode = 1      Stage = 1      A = xyz_lock_Link(A, Bla1, Grp1)
        #Reverse = 0      Mode = 2      Stage = 1      A = xyz_lock_Link(A, Bla1, Grp1)
        
        
        
        
        
        #Rope_Base = array(Base)
        #Rope_Base = array(Base, SET[5, entity])
        Rope_Base = array(Base, SET[9, entity], SET[12, entity])
        Reverse = 0      B = Swash:ropeSlider_B(B, Rope_Base)
        
        
        
        
        Reverse = 0      Extra:axisSlider(vec(0, 0, 1), ang(0.0, 0.0, -3.0), Extra:define_Slider()[2, number])
        
        
        
        
        Reverse = 0      smartWelt()
        
        
        
        
        Reverse = 0      clk_Hydraulic1()  # Swashplate Lateral & Longitudinal Control Set-up
        
        Reverse = 0      clk_Hydraulic2()  # Swashplate Stroke control
        
        #Reverse = 0      clk_Hydraulic3()  # Extra Swashplate Lateral & Longitudinal Control Set-up
        
        Reverse = 0      clk_Hydraulic4()  # Extra Swashplate Stroke control
        
        
        
        end_Case()
        
        break
        
        
        
        
        
        case 2,
        
        start_Case()
        
        
        
        #Hub1:rc("rope")
        #Hub1:rc("axis")
        #Hub1:rc("ballsocket")
        #Reverse = 0      Stage = 1      Bla1:lead_lag_Rope()
        
        #Grp1:rc_Array("advballsocket")
        
        #Grp1:rc_Array("ballsocket")
        
        
        #Reverse = 0      Grp1:ball_Array(Hub1)
        #Reverse = 0      Grp1:ball_Array(Hub1)
        
        
        end_Case()
        
        break
        
        
        
        
        
        
        
        case 3,
        
        start_Case()
        
        
        
        Bla1:multi_I("mul", vec(1.5):setX(0.5))      Grp1:multi_I("dir", vec(4.0):setZ(4.0 / 1.0))
        Bla2:multi_I("mul", vec(15.0):setX(1.0))
        
        Base:single_I("dir", vec(110.0))
        
        XMSN1:single_I("mul", vec(5.0))
        XMSN2:single_I("mul", vec(5.0))
        
        Hub1:single_I("dir", vec(100.0):setZ(100.0))
        Hub2:single_I("dir", vec(5.0):setZ(5.0))
        
        Swash:single_I("dir", vec(25.0):setZ(25.0))
        
        
        SET[3, entity]:single_I("mul", vec(1.0, 1.0, 1.0))   # Port side Landing skid
        SET[4, entity]:single_I("mul", vec(1.0, 1.0, 1.0))   # Stbd side Landing skid
        
        
        SET[5, entity]:single_I("dir", vec(35.0))   # Vertical Stabilizer
        
        
        
        end_Case()
        
        break
        
        
        
        
        
        
        
        default, end() break
    }
}

if(clk("Alignment")){alignment()}

if(clk("HoloSet")){holoSet()}

if(clk("Print")){printF()}

if(clk("Center of gravity")){cg()}

if(~Pad_8 & Pad_8){turn_OnOff_alpha()}

if(clk("print_index_Entity")){print_index_Entity()}
