@name Implicit Euler
@inputs 
@outputs Xn
@persist DT Xn Xn1 Xn2 
@trigger 

# First call
if( first() ) {
    # Iteration values
    X_INIT = 10
    
    Xn = X_INIT
    Xn1 = X_INIT
    Xn2 = X_INIT - 1
    
    # Constants
    DT = 1

        # Ode function - feedback
    function number ode(X) {
        return -X * 10  # Test equation
    }
    
        # Root function    
    function number func(X) {
        return -X + Xn1 + DT*ode(X)
        #return (-X + Xn1)/ode(X) + DT
    }
    
    # Secant method to find root of equation
    function number secant_root(X1, X2, Nstep) {
        X = X1
        for( I = 0, Nstep - 1 ) {
            if( func(X1) == 0 || func(X1) == func(X2) ) {break}
            X = X - (X1 - X2) * func(X1)/( func(X1) - func(X2) ) 
            X2 = X1
            X1 = X 
        }
        return X   
    }
} # end, First call

## Test evaluation
interval(1000)

    # Find estimate
Xroot = secant_root(Xn1, Xn2, 100)
Xn = Xroot + func(Xroot)

    # Store values 
Xn2 = Xn1
Xn1 = Xn


