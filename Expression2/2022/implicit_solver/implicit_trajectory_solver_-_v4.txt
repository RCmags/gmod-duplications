@name Implicit trajectory solver
@inputs E:entity
@outputs Xms Xn
@persist DT_MS DT ERROR MASS
@persist Xn 
@trigger 

# First call
if( first() ) {
    #--- Constants ---
    DT_MS = 10
    DT = DT_MS * 1e-3
    ERROR = 1e-2
    MASS = E:mass()
        
    #--- Implicit euler ----

        # Ode function - feedback
    function number ode(X) {
        return -sign(X) * X^2 * 100 / DT
    }
    
        # Root function    
    function number func(X) {
        return -X + Xms + DT*ode(X)
    }
    
    # Secant method to find root of equation
    function number secant_root(X1, X2, Nstep) {
        F2 = func(X2)   # Cannot use last estimate, X2 changes 
        F1 = F2         # Initialize value
 
        for( I = 1, Nstep ) {
            F1 = func(X1)
            if( F1 == F2 ) {break}              # Prevent zero division
            X = X1 - (X1 - X2) * F1/(F1 - F2)   # Improve estimate
            if( abs(F1) < ERROR ) {break}       # Ensure small error
            # Store past values
            X2 = X1
            X1 = X 
            #
            F2 = F1
        }
        return X1   
    }
    
    #--- Set Prop velocity ---
    function void setVelocity( Vel:vector ) {
        Impulse = MASS * ( Vel - E:vel() )
        E:applyForce( Impulse )
    }
} # end, First call

## Test evaluation
interval(DT_MS)

# 1. Measure velocity
Xms = E:vel():z()

# 2. Find estimate
    # Iterate near measured state
Xn = secant_root(Xms, Xms*0.5, 20)  

# 3. Set Prop state   [Must come after velocity measurement, or blocks measurement]
setVelocity( vec(0, 0, Xn) )

# Note: The root solving process is very costly at load.
#       Its results may be approximated with a gain function.
