@name IMU filter - kalman gain - v3
@inputs 
@outputs [Acc_local Zlocal]:vector Ka
@persist Qt:quaternion Rate:vector 
@persist Vel:vector Zint:vector 
@persist Var

if( first() ) {
    Qt = quat(1, 0, 0, 0)
    Var = 0
    Kfilter = 0
}

# 0. timer
DT = 10
interval(DT)
DT *= 1e-3

# 1. State
E = entity()
Pos = E:pos()
Angvel = (  E:angVelVector() * 90/60 )* pi()/180  # need to correct scale

    # global cceleration
Vel_new = E:vel()
Acc = (Vel_new - Vel)/DT
Vel = Vel_new
        # gravity
Acc = Acc/900
Acc_g = Acc + vec(0,0,1)

    # local acceleration
Acc_local = E:toLocal( Pos + Acc_g )
Acc_mag = Acc_local:length() # Raw accelerometer magnitude

    # Accel correction: Remove centrifugal
Vel_local = E:velL()        # Need velocity measurement or estimate
#Vel_local = vec(2000,0,0)   # Estimate 

# NOTE: Using a velocity estimate causes heading to drift beyond bounds

Acc_cent = Angvel:cross(Vel_local) / 900
Acc_diff = Acc_local - Acc_cent

# 3. Sensor fusion
    # A: global projection of acceleration
Qz = quat( 0, Acc_diff:x(), Acc_diff:y(), Acc_diff:z() ) 
Qz = Qt * Qz * conj(Qt)

Acc_rel = vec(Qz) - vec(0,0,1)  # global estimate w/o gravity
Acc_error = Acc_rel:length() 

    # B: set kalman gain
VAR_ACC = 0.1                       # Variance in acceleration
Ka = 1/(1 + (Var/VAR_ACC)^2 )       # Kalman gain
Var += Acc_error - Var*(1 - Ka)     # Variance estimate
    
    # Scale low-pass filter by variance
KP = 0.1    
KC = sqrt(2*KP) 
KP *= Ka          # modulate error

    # C: update rotation
Zest = Acc_diff:normalized()
Error = Zest:cross(Zlocal)
Qz = conj(Qt) * quat(0, 0, 0, 1) * Qt
Zlocal = vec(Qz)

    # gyroscope change
Rate += Error*KP - Rate*KC
Theta = Angvel*DT + Rate
Theta *= 180 / pi()

Qt *= qRotation( Theta:normalized(), Theta:length() )
