@name Robust integration - v2
@inputs E:entity
@outputs Accel:vector

# Constants
@persist GAIN MASS DT
@trigger 

# Acceleration
if( first() ) {
    # Constants
    DT = tickInterval()
    MASS = E:mass() 
    
    # Functions
    GAIN = 2
        # acceleration function    
    function vector accel(Vel:vector) {
        return -GAIN * Vel
    }
}

#=== Iterated code
runOnTick(1)

# 1. Input state
Y0 = E:vel() 

# 2. Update scheme [Heun's method - Explicit trapezoidal]
Y1 = Y0 + DT*accel(Y0)
Y2 = Y0 + (1/2)*DT*( accel(Y0) + accel(Y1) )

# 3. Acceleration at next time step - Finite difference
Accel = (Y2 - Y0)/DT

# Induce acceleration
E:applyForce( MASS * Accel )

