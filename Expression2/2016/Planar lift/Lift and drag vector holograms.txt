@name Proper lift and drag
@inputs E:entity
@outputs [ N V L D F A ]:vector K
@persist 

if( first() ) {

# Normalized Lift vector

holoCreate( 0 , E:pos() )
holoParent( 0 , E )
holoAlpha( 0 , 0 )

holoCreate( 1 , E:pos() )
holoParent( 1 , holoEntity(0) )
holoModel( 1 , "hq_cylinder" )
holoScaleUnits( 1 , vec( 1 , 1 , 12 ) )
holoColor( 1 , vec( 0 , 0 , 255 ) )
holoPos( 1 , holoEntity(0):toWorld( vec( 0 , 0 , 6 ) ) )

holoCreate( 2 , E:pos() )
holoParent( 2 , holoEntity(0) )
holoModel( 2 , "cone" )
holoScaleUnits( 2 , vec( 3 , 3 , 3 ) )
holoColor( 2 , vec( 0 , 0 , 255 ) )
holoPos( 2 , holoEntity(0):toWorld( vec( 0 , 0 , 12 ) ) )

# Normalized Drag vector

holoCreate( 3 , E:pos() )
holoParent( 3 , E )
holoAlpha( 3 , 0 )

holoCreate( 4 , E:pos() )
holoParent( 4 , holoEntity(3) )
holoModel( 4 , "hq_cylinder" )
holoScaleUnits( 4 , vec( 1 , 1 , 12 ) )
holoColor( 4 , vec( 255 , 0 , 0 ) )
holoPos( 4 , holoEntity(3):toWorld( vec( 0 , 0 , 6 ) ) )

holoCreate( 5 , E:pos() )
holoParent( 5 , holoEntity(3) )
holoModel( 5 , "cone" )
holoScaleUnits( 5 , vec( 3 , 3 , 3 ) )
holoColor( 5 , vec( 255 , 0 , 0 ) )
holoPos( 5 , holoEntity(3):toWorld( vec( 0 , 0 , 12 ) ) )

# Normalized Acceleration vector

holoCreate( 6 , E:pos() )
holoParent( 6 , E )
holoAlpha( 6 , 0 )

holoCreate( 7 , E:pos() )
holoParent( 7 , holoEntity(6) )
holoModel( 7 , "hq_cylinder" )
holoScaleUnits( 7 , vec( 1 , 1 , 12 ) )
holoColor( 7 , vec( 0 , 255 , 0 ) )
holoPos( 7 , holoEntity(6):toWorld( vec( 0 , 0 , 6 ) ) )

holoCreate( 8 , E:pos() )
holoParent( 8 , holoEntity(6) )
holoModel( 8 , "cone" )
holoScaleUnits( 8 , vec( 3 , 3 , 3 ) )
holoColor( 8 , vec( 0 , 255 , 0 ) )
holoPos( 8 , holoEntity(6):toWorld( vec( 0 , 0 , 12 ) ) )

}

runOnTick(1)

V = E:vel()

N = E:up()

L = ( (  N:cross( V ) ):cross( V ) ):normalized()

D = V:normalized()

K = acos( ( N:dot( V ) )/( N:length()*V:length() ) ) - 90

F = -( D*sin(K)^2 + 5*L*sin(K) )*V:length2()/1000

E:applyForce( F )

#

A = $V

holoPos( 0 , E:pos()  )
holoAng( 0 , L:toAngle() - sign(K)*ang( 90 , 0 , 0 ) )

holoPos( 3 , E:pos() )
holoAng( 3 , D:toAngle() - ang( 90 , 0 , 0 ) )

holoPos( 6 , E:pos() )
holoAng( 6 , A:toAngle() - ang( 90 , 0 , 0 ) )
