@name Lift and drag 
@inputs E:entity
@outputs Ang_inc [Lift Drag]:vector
@persist Size:vector Area Density Adjustment_factor

#Constants

if( first() ) {
    
    Size = E:boxSize()
    Area = Size:x()*Size:y()
    
    Density = airDensity()
    
    Adjustment_factor = 0.000001
  
    #Drag Vector
#    holoCreate( 1 , E:pos() )
 #   holoModel( 1 , "cylinder", 0 )
  #  holoScale( 1 , vec( 4 , 0.2 , 0.2 ) )
   # holoColor( 1 , vec( 255 , 0 , 0 ) , 255 )
    #holoParent( 1 , E )
    
    #Lift Vector
    #holoCreate( 2 , E:pos() )
    #holoModel( 2 , "cylinder", 0 )
    #holoScale( 2 , vec( 4 , 0.2 , 0.2 ) )
    #holoColor( 2 , vec( 0 , 0 , 255 ) , 255 )
    #holoParent( 2 , E )

}

#Continuous operation

runOnTick(1) 

#Input paramenters
Vel_inf = E:vel()

Vel_inf_norm = Vel_inf:normalized()

Area_norm = E:up()

Ang_inc = sign( E:velL():z() )*acos( ( Vel_inf:cross( Area_norm ):length() )/Vel_inf:length() )

#Output parameters
Coef_lift = sin( 2*Ang_inc ) 

Coef_drag = 2*sin( Ang_inc )^2 + 0.001


Lift_norm = Vel_inf_norm:cross( Vel_inf_norm:cross( Area_norm ) ) 

Drag_norm = -Vel_inf_norm 

Common_factor = Adjustment_factor*Area*( Density*Vel_inf:length2()/2 )

#Forces

Lift = Lift_norm*( Common_factor*Coef_lift )
Drag = Drag_norm*( Common_factor*Coef_drag )

E:applyForce( Lift + Drag )

#----

#Drag
#holoAng( 1 , Drag_norm:toAngle() )
#holoPos( 1 , E:pos() + Drag_norm*16 )

#Lift
#holoAng( 2 , Lift_norm:toAngle() )
#holoPos( 2 , E:pos() + Lift_norm*16 )






