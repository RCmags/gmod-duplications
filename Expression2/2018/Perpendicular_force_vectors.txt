@name Perpendicular force vectors
@inputs E:entity
@outputs [V L_up L_right L_forward]:vector #Vectors
@outputs Angle_up Angle_right Angle_forward #Angles of Incidence
@outputs S_up S_forward S_right #Areas

runOnTick(1)

V = E:vel() 

# Object directions
N_up = E:up()

N_right = E:right()

N_forward = E:forward()


# Vectors Perpendicular to velocity and object directions: 
L_up = ( ( ( N_up ):cross( V ) ):cross( V ) ):normalized()

L_right = ( ( ( N_right ):cross( V ) ):cross( V ) ):normalized()

L_forward = ( ( ( N_forward ):cross( V ) ):cross( V ) ):normalized()


# Individual angles of attack:
Angle_up = acos( ( N_up:dot( V ) )/( V:length() ) ) - 90

Angle_right = acos( ( N_right:dot( V ) )/( V:length() ) ) - 90

Angle_forward = acos( ( N_forward:dot( V ) )/( V:length() ) ) - 90

# Test for lift:

    #Lift equation parameters:
    V_norm = V:length2()/(10^6)
    B = E:boxSize()

    #Areas:
    S_up = B:x()*B:y()
    S_right = B:z()*B:x()
    S_forward = B:z()*B:y()

    #Individual perpendicular forces: Note Negatives
    L_up = -L_up*sin(Angle_up)*V_norm*S_up

    L_right = -L_right*sin(Angle_right)*V_norm*S_right 

    L_forward = -L_forward*sin(Angle_forward)*V_norm*S_forward 

    #Applying Force:
    E:applyForce( L_up + L_right + L_forward )

#Note: Instability about yaw axis is created by model
#       lateral pressures are exaggerated.


