@name General rotor control and stabilizacion
@inputs H:entity W S A D On Space Shift Mouse1 Mouse2 
@outputs Constant Damping HydroForward HydroBackwards HydroLeft HydroRight TailThruster
@outputs Velocity CollectivePercentage Start
@persist Collective Throttle P R Start Pitch Roll

interval(10)

#Entities

E = entity()

#Throttle control

if(~On & On) {Start = !Start}

Throttle = clamp((Start/300 + Throttle)*Start,0,1)

#Rotor Torque

AngVel = H:angVel():yaw()

H:applyAngForce( 1500*Start*ang(0, -Throttle*1600 - AngVel , 0) )

#Hydraulic constants

Constant = 20000
Damping = 400

#Angular velocities

Sp = E:angVel():pitch()
Sr = E:angVel():roll()

#Rotor gain reduction:

G = (AngVel/1000)^8/sqrt((AngVel/1000)^16 + 1)

#Maximum cyclic deflection:

M = 10

#Pitch and roll accumulators ( target angle )
P = clamp( ( Sp + (W - S)*25 )*0.0086 + P , -M , M )*G
R = clamp( ( Sr + (D - A)*25 )*0.0086 + R , -M , M )*G

#Precession gain ( value required to obtain approximately 0 cross coupling )

N = -0.024

#Pitch and roll inputs
Pi = clamp( P - Sr*N + 0.143*Sp + (W - S)*1 , -M , M )
Ri = clamp( R + Sp*N + 0.143*Sr + (D - A)*1 , -M , M )
 
#Phase angle ( approximately disk tilt angle )

F = -7.875

#Control limits per axis:

Pm = ( M^2 - Roll^2 )^(1/2)
Rm = ( M^2 - Pitch^2 )^(1/2)

#Pitch control. 
Pitch = clamp( Pi*cos(F) - sin(F)*Ri , -Pm , Pm )*G

#Pitch control. 
Roll =  clamp( Ri*cos(F) + sin(F)*Pi , -Rm , Rm )*G

#Collective control. 
Collective = clamp((Space - Shift)/10 + Collective, -2,8)

#Individual hydraulic length

Length = 23.72 + Collective + (Pitch^2 + Roll^2)*( 1/(95.725 + Collective) - 1/23.725 )/1.85

HydroForward = Length - Pitch
HydroBackwards = Length + Pitch
HydroLeft = Length + Roll
HydroRight = Length - Roll

#Tail thruster

TailThruster = ( (Mouse1 - Mouse2)*55 - E:angVel():yaw() )*2

#Screen outputs

V = E:velL()

Velocity = toUnit( "km/h" , V:length() )

CollectivePercentage = Collective*100/8

#Rotor stabilization consists of two components:

# - A nutation component: This torque acts at 90 degrees from any angular rotation. It causes instability and 
# input wobble. It seems to depend linearly only on angular velocity. By adding cyclic in direct 
# opposition with no offset to this torque, all nutation wobble can be cancelled.

# - A precessive component: This torque depends on angular velocity and will act at an angle less than 90 degrees. 
# It is this torque that is used to apply control inputs. All directional cyclic outputs are offset by this torque.
# The swashplate must tilt in this torque's direction to apply control inputs. 
